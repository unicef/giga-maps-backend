# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - develop
    - staging
  tags:
    include:
    - 'release-*'

name: $(SourceBranchName).$(Build.BuildId).$(Date:yyyyMMdd).$(Rev:r)

pool:
  vmImage: 'ubuntu-22.04'
variables:
  dockerRegistryServiceConnection: $(DOCKER_SERVICE_CONNECTION)
  dockerfilePath: './Dockerfile'
  app: $(DOCKER_REPOSITORY)
  imageRepositoryDev: 'dev/$(app)'
  imageRepositoryStg: 'stg/$(app)'
  imageRepositoryProd: 'prod/$(app)'
  tag: '$(Build.BuildId)'
  pythonVersion: '3.8'

steps:
# Use a specific Python version
- task: UsePythonVersion@0
  displayName: Building Razor with $(pythonVersion)
  inputs:
     versionSpec: $(pythonVersion)
     addToPath: true

- task: Docker@2
  inputs:
    repository: $(imageRepositoryDev)
    containerRegistry: '$(dockerRegistryServiceConnection)'
    command: 'build'
    Dockerfile: './Dockerfile-Test'
    tags: 'unit-test'
    #arguments: '--build-arg AD_B2C_BASE_URL= --build-arg AD_B2C_CLIENT_ID= --build-arg AD_B2C_DOMAIN= --build-arg AD_B2C_EDIT_PROFILE_POLICY=B2C_1_ProfileEditingPolicy --build-arg AD_B2C_FORGOT_PASSWORD_POLICY=B2C_1_PasswordResetPolicy --build-arg AD_B2C_SIGNUP_SIGNIN_POLICY=B2C_1_UNICEF_SOCIAL_signup_signin --build-arg AD_B2C_TENANT_ID= --build-arg CELERY_BROKER_URL=redis://localhost:6379/0 --build-arg CELERY_RESULT_BACKEND_URL=redis://localhost:6379/0 --build-arg COUNTRY_INDEX_NAME=giga-countries --build-arg DAILY_CHECK_APP_API_CODE=DAILY_CHECK_APP --build-arg DAILY_CHECK_APP_BASE_URL=https://uni-ooi-giga-daily-check-service-api-dev.azurewebsites.net/api/v1 --build-arg DATA_LAYER_DASHBOARD_URL=http://localhost:9500/admin/giga-layer --build-arg DATABASE_URL=postgis://postgres:root@localhost/postgres --build-arg DEFAULT_FROM_EMAIL=giga@mail.unicef.org --build-arg DJANGO_SECRET_KEY= --build-arg DJANGO_SETTINGS_MODULE=config.settings.dev_test --build-arg DOCKER_REPOSITORY=project-connect-backend-v2 --build-arg DOCKER_SERVICE_CONNECTION=UNICEF_DATA_CONNECT_WEB_ACR --build-arg GIGA_METER_DATABASE_URL=postgis://postgres:root@localhost/postgres1 --build-arg GIGA_METER_ENABLE_AUTO_SYNC=true; allowOverride=True --build-arg MAILJET_API_KEY= --build-arg MAILJET_API_URL=https://api.mailjet.com/v3 --build-arg MAILJET_SECRET_KEY= --build-arg PROJECT_FULL_NAME=gigamaps-test --build-arg PROJECT_SHORT_NAME=gigamaps-test --build-arg QOS_BEARER_TOKEN= --build-arg QOS_ENDPOINT= --build-arg QOS_EXPIRATION_TIME= --build-arg QOS_SCHEMA_NAME=qos --build-arg QOS_SHARE_CREDENTIALS_VERSION=1 --build-arg QOS_SHARE_NAME=gold --build-arg READ_ONLY_DATABASE_URL=postgis://postgres:root@localhost/postgres --build-arg REDIS_URL_DEV=isSecret=True --build-arg SCHOOL_INDEX_NAME=giga-schools-test --build-arg SCHOOL_MASTER_BEARER_TOKEN= --build-arg SCHOOL_MASTER_DASHBOARD_URL=http://localhost:9500/admin/data-source --build-arg SCHOOL_MASTER_ENDPOINT= --build-arg SCHOOL_MASTER_EXPIRATION_TIME= --build-arg SCHOOL_MASTER_REVIEW_GRACE_PERIOD_IN_HRS=48 --build-arg SCHOOL_MASTER_SCHEMA_NAME=school-master --build-arg SCHOOL_MASTER_SHARE_CREDENTIALS_VERSION=1 --build-arg SCHOOL_MASTER_SHARE_NAME=gold --build-arg SEARCH_API_KEY=SEARCH_API_KEY --build-arg SEARCH_ENDPOINT=SEARCH_ENDPOINT --build-arg SONAR_HOST=isSecret=True --build-arg SONAR_TOKEN=isSecret=True --build-arg SSH_PASSWD=isSecret=True --build-arg SUPPORT_EMAIL_ID=giga@mail.unicef.org --build-arg SUPPORT_PHONE_NUMBER=1234567890'
    addPipelineData: false
    addBaseImageData: false

- task: Docker@2
  displayName: Dev - Build and Push image
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryDev)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)

- task: Bash@3
  displayName: Unit Tests
  # condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    targetType: 'inline'
    script: |
      sudo systemctl start postgresql.service
      sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'root';"
      wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
      echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
      curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list
      sudo apt update
      sudo apt install postgis postgresql-14-postgis-3
      sudo apt-get install redis
      sudo apt install binutils libproj-dev gdal-bin
      sudo add-apt-repository ppa:deadsnakes/ppa
      sudo apt update
      echo "-------------------------------------Pyhthon Activities Start---------------------------------------"
      sudo apt install python3.8 python3.8-dev python3.8-distutils python3.8-venv
      sudo python3.8 --version
      sudo ln -sf /usr/bin/python3.8 /usr/bin/python
      sudo python --version
      echo "-------------------------------------Pyhthon Activities End---------------------------------------"
      sudo pip install pipenv
      echo "-------------------------------------Starting Package Installation---------------------------------------"
      pipenv install --ignore-pipfile --dev
      echo "-------------------------------------Ending Package Installation-----------------------------------------"
      ./scripts/runtests.sh
  continueOnError: true

# Sonar Scan
- task: Bash@3
  displayName: Sonar Scan
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    targetType: 'inline'
    script: |
      export SONAR_SCANNER_VERSION=5.0.1.3006
      export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
      curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
      unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      export SONAR_SCANNER_OPTS="-server"
      export SONAR_TOKEN=$(SONAR_TOKEN)
      sonar-scanner \
        -Dsonar.projectKey=${{ lower(variables['Build.DefinitionName']) }} \
        -Dsonar.sources=proco \
        -Dsonar.host.url=$(SONAR_HOST) \
        -Dsonar.python.coverage.reportPaths=coverage.xml \
        -Dsonar.exclusions=**/migrations/**,**/proco_data_migrations/**,**/tests/**,**/proco/**/admin.py,**/dailycheckapp_contact/**,**/realtime_dailycheckapp/**,**/realtime_unicef/**,**/management/commands/**

# Docker build and push
- task: Docker@2
  displayName: Dev - Build and Push image
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryDev)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)

- task: Docker@2
  displayName: Stg - Build and Push image
  condition:
      and(
        succeeded(),
        eq(variables['Build.SourceBranch'], 'refs/heads/staging')
      )
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryStg)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)

- task: Docker@2
  displayName: Prod - Build and Push image
  condition:
      and(
        succeeded(),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/release-')
      )
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryProd)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)
