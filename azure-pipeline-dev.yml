# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - develop
    - staging
  tags:
    include:
    - 'release-*'

name: $(SourceBranchName).$(Build.BuildId).$(Date:yyyyMMdd).$(Rev:r)

pool:
  vmImage: 'ubuntu-22.04'
variables:
  dockerRegistryServiceConnection: $(DOCKER_SERVICE_CONNECTION)
  dockerfilePath: './Dockerfile'
  app: $(DOCKER_REPOSITORY)
  imageRepositoryDev: 'dev/$(app)'
  imageRepositoryStg: 'stg/$(app)'
  imageRepositoryProd: 'prod/$(app)'
  tag: '$(Build.BuildId)'
  pythonVersion: '3.8'
  BUILD_DEFINITION_NAME: $[lower(variables['Build.DefinitionName'])]

steps:
# Use a specific Python version
- task: UsePythonVersion@0
  displayName: Building Razor with $(pythonVersion)
  inputs:
     versionSpec: $(pythonVersion)
     addToPath: true

- task: Docker@2
  displayName: Unit Tests and Sonar Scan
  # condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    containerRegistry: '$(dockerRegistryServiceConnection)'
    repository: '$(imageRepositoryDev)'
    command: 'build'
    Dockerfile: './Dockerfile-Test'
    tags: 'unit-test'
    arguments:
      --build-arg=SONAR_HOST=$(SONAR_HOST)
      --build-arg=SONAR_TOKEN=$(SONAR_TOKEN)
      --build-arg=BUILD_DEFINITION_NAME=$(BUILD_DEFINITION_NAME)
    addPipelineData: false
    addBaseImageData: false

# Docker build and push
- task: Docker@2
  displayName: Dev - Build and Push image
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryDev)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)

- task: Docker@2
  displayName: Stg - Build and Push image
  condition:
      and(
        succeeded(),
        eq(variables['Build.SourceBranch'], 'refs/heads/staging')
      )
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryStg)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)

- task: Docker@2
  displayName: Prod - Build and Push image
  condition:
      and(
        succeeded(),
        startsWith(variables['Build.SourceBranch'], 'refs/tags/release-')
      )
  inputs:
    command: buildAndPush
    repository: $(imageRepositoryProd)
    dockerfile: $(dockerfilePath)
    containerRegistry: $(dockerRegistryServiceConnection)
    tags: |
      $(tag)
